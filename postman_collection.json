{
	"info": {
		"_postman_id": "instant-file-ops-collection",
		"name": "Instant File Operations API",
		"description": "API для работы с файлами через presigned URLs (MinIO/S3)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "file_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "upload_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "download_url",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Database is up', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.database.status).to.eql('up');",
							"});",
							"",
							"pm.test('Storage is up', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.storage.status).to.eql('up');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": ["{{base_url}}"],
					"path": ["health"]
				},
				"description": "Проверка здоровья сервисов (БД + Storage)"
			},
			"response": []
		},
		{
			"name": "1. Generate Upload URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test('Response has upload_url', function () {",
							"    pm.expect(jsonData).to.have.property('upload_url');",
							"});",
							"",
							"pm.test('Response has file_key', function () {",
							"    pm.expect(jsonData).to.have.property('file_key');",
							"});",
							"",
							"// Сохраняем file_key и upload_url для следующих запросов",
							"pm.collectionVariables.set('file_key', jsonData.file_key);",
							"pm.collectionVariables.set('upload_url', jsonData.upload_url);",
							"",
							"console.log('File Key:', jsonData.file_key);",
							"console.log('Upload URL:', jsonData.upload_url);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filename\": \"test-image.jpg\",\n  \"content_type\": \"image/jpeg\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/files/upload-url",
					"host": ["{{base_url}}"],
					"path": ["files", "upload-url"]
				},
				"description": "Получить presigned URL для загрузки файла.\n\n**Автоматически сохраняет:**\n- `file_key` - для последующего скачивания\n- `upload_url` - для загрузки файла"
			},
			"response": []
		},
		{
			"name": "2. Upload File (использует URL из шага 1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log('File uploaded successfully!');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Проверяем что upload_url установлен",
							"var uploadUrl = pm.collectionVariables.get('upload_url');",
							"if (!uploadUrl) {",
							"    throw new Error('Upload URL not set! Run \"1. Generate Upload URL\" first.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "image/jpeg"
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					}
				},
				"url": {
					"raw": "{{upload_url}}",
					"host": ["{{upload_url}}"]
				},
				"description": "Загружает файл напрямую в MinIO используя presigned URL.\n\n**Инструкция:**\n1. Сначала выполните \"1. Generate Upload URL\"\n2. В Body → Binary выберите файл с вашего компьютера\n3. Отправьте запрос\n\n⚠️ URL действителен 15 минут!"
			},
			"response": []
		},
		{
			"name": "3. Generate Download URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test('Response has download_url', function () {",
							"    pm.expect(jsonData).to.have.property('download_url');",
							"});",
							"",
							"// Сохраняем download_url",
							"pm.collectionVariables.set('download_url', jsonData.download_url);",
							"",
							"console.log('Download URL:', jsonData.download_url);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Проверяем что file_key установлен",
							"var fileKey = pm.collectionVariables.get('file_key');",
							"if (!fileKey) {",
							"    throw new Error('File key not set! Upload a file first.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"file_key\": \"{{file_key}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/files/download-url",
					"host": ["{{base_url}}"],
					"path": ["files", "download-url"]
				},
				"description": "Получить presigned URL для скачивания файла.\n\n**Автоматически использует** `file_key` из шага 1.\n\n**Автоматически сохраняет:**\n- `download_url` - для скачивания файла"
			},
			"response": []
		},
		{
			"name": "4. Download File (открыть в браузере)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log('File downloaded successfully!');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Проверяем что download_url установлен",
							"var downloadUrl = pm.collectionVariables.get('download_url');",
							"if (!downloadUrl) {",
							"    throw new Error('Download URL not set! Run \"3. Generate Download URL\" first.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{download_url}}",
					"host": ["{{download_url}}"]
				},
				"description": "Скачивает файл из MinIO используя presigned URL.\n\n**Инструкция:**\n1. Выполните \"3. Generate Download URL\"\n2. Отправьте этот запрос\n3. Или скопируйте `download_url` и откройте в браузере\n\n⚠️ URL действителен 1 час!"
			},
			"response": []
		},
		{
			"name": "5. Delete File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test('File deleted successfully', function () {",
							"    pm.expect(jsonData.message).to.include('deleted');",
							"});",
							"",
							"// Очищаем переменные",
							"pm.collectionVariables.set('file_key', '');",
							"pm.collectionVariables.set('upload_url', '');",
							"pm.collectionVariables.set('download_url', '');",
							"",
							"console.log('File deleted and variables cleared!');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Проверяем что file_key установлен",
							"var fileKey = pm.collectionVariables.get('file_key');",
							"if (!fileKey) {",
							"    throw new Error('File key not set! Upload a file first.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/files/{{file_key}}",
					"host": ["{{base_url}}"],
					"path": ["files", "{{file_key}}"]
				},
				"description": "Удаляет файл из хранилища.\n\n**Автоматически использует** `file_key` из шага 1.\n\n**Автоматически очищает** все переменные после удаления."
			},
			"response": []
		},
		{
			"name": "Example: Text File Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set('file_key', jsonData.file_key);",
							"pm.collectionVariables.set('upload_url', jsonData.upload_url);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filename\": \"document.txt\",\n  \"content_type\": \"text/plain\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/files/upload-url",
					"host": ["{{base_url}}"],
					"path": ["files", "upload-url"]
				},
				"description": "Пример для текстового файла"
			},
			"response": []
		},
		{
			"name": "Example: PDF Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set('file_key', jsonData.file_key);",
							"pm.collectionVariables.set('upload_url', jsonData.upload_url);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filename\": \"report.pdf\",\n  \"content_type\": \"application/pdf\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/files/upload-url",
					"host": ["{{base_url}}"],
					"path": ["files", "upload-url"]
				},
				"description": "Пример для PDF файла"
			},
			"response": []
		}
	]
}
